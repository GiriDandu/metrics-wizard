= Hacking on metric-wizard

== Getting Started

=== System requirements

* JDK7

=== Running the tests

* `./gradlew check`: This will run the `test` task, which runs spock tests

=== Building the documentation

* `./gradlew asciidoc`

=== Building Jar file

* `./gradlew Jar`

=== Running the Metrics-wizard with Application

* `java -javaagent=metrics-wizard.jar -jar application.jar app_arg1 app_arg2`


== Code Structure

The metric-wizard source code can be found in a few different directories:

* `src/` - source tree
** `/asciidoc` - link:http://asciidoctor.org[Asciidoctor]-based documentation files
** `/main/java/com/github/lookout/metricswizard/` - Directory contains Metrics-Wizard code
*** `/mbeansdiscovery` - MBeans discovery module
*** `/metricsbuilder' - builds the Metrics registry from MBeans
*** `/metricsreporters` - creates the configured reporter
** `/test/groovy/com/github/lookout/metricswizard` - spock tests
* `metricswizardintegtest` - Integration application that launches with metrics-wizard agent

== Classes

* `WizardAgent`
** Central class that contains instances of `MBeansDiscovery`, `MetricsBuilder`, and
   `ReporterBuilder`.
* `MBeansDiscovery`
** Discovers the MBeans by listening or polling the MBean server
** It emits the register, change or unregister notifications via MBeansBuilder interface.
* `MBeansBuilder`
** Defines the interface between MBeansDiscovery and MetricsBuilder
* `MetricsBuilder` derived from `MBeansBuilder`
** Listens to MBeans via MBeansBuilder interface
** Creates a context for each MBean
*** `MetricsContext` defines an interface
*** `BasicMetricsContext`
**** implements `MetricsContext` interface
**** converts each MBean attribute with long/double/float type to a unique com.codehale.metric.Gauge.
*** future: `MeterMetricsContext` converts MBean to `com.codehale.metric.Meter`
*** future: `HistogramMetricsContext` converts MBean to `com.codehale.metric.Histogram`
* `ReporterBuilder`
** Creates the configured reporter factory and builds the configured reporter. The reporter will
use the metric registry to process the discovered metrics and forwards them to the reporter.
** Each type of reporter factory is derived from the dropwizard metrics BaseReporterFactory class.
The "type" parameter of the reporter configuration will be used to create the reporter factory
of a given reporter type.
** If a new reporter type is needed, then a new factory should be created with appropriate
parameters to build the new reporter.
** Once the reporter factory is created, a given reporter is built using the parameters in the configuration
*** `ReporterFactory` - Top level model class that contains the configured reporter factory
*** `ConsoleReporterFactory` - Contains the console reporter specific configuration. Builds the
reporter based of type console. For more information, follow this link:https://dropwizard.github.io/metrics/3.1.0/manual/core/#console[check this]
*** `DatadogReporterFactory` - Contains the datadog reporter specific configuration. Builds the
reporter based of type datadog. It will use either udp or http transport.
For more information on DatadogReporter, follow this link:https://github.com/coursera/metrics-datadog[check this]

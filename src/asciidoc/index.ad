= #Metrics-Wizard

image::https://badges.gitter.im/Join%20Chat.svg[link="https://gitter.im/lookout/metrics-wizard"]
image:https://travis-ci.org/lookout/metrics-wizard.svg?branch=master["Build Status",link="https://travis-ci.org/lookout/metrics-wizard"]

**Who, what, where and when.**

---

== Important Links

* link:https://github.com/lookout/metrics-wizard[Source code]
* link:https://github.com/lookout/metrics-wizard/issues[Issue Tracker]

== Internals Links

* <<hacking.ad#,Hacking>>
* <<workflow.ad#,WorkFlow>>
* <<configuration.ad#, Configuration>>

== The Problem

Applications expose their metrics via JMX interface.

Usually a remote client connects to the JMX port and gathers all the metrics. However, as
discussed in this link:http://hackers.lookout.com/2015/01/cassandra-monitoring/[article]
there are issues with this approach:

* the remote client has to poll the application's JMX interface
* application may require authentication to avoid exposing vulnerabilities
* redundancy issues if remote client dies

== The Solution

* Metrics Wizard is a Java agent for aggregating and reporting metrics from any JVM process.

* It runs along side the application on same JVM and discovers MBeanServer(s) and MBean(s)
  as they become available on the JMX interface.

* It transforms these MBeans and/or attributes into dropwizard metrics.

* The reporter publishes metrics to the upstream server. The metrics-wizard allows user to
  configure the reporter, underlying transport, attributes to be published, etc.

* The agent consists of MBeansDiscovery, MetricsBuilder and Reporter

    SNMPReporter   <-.
                      \
    DatadogReporter <-- Reporter
                      /    ^
    StatsdReporter <-`     |
                           |
                    [MetricRegistry]
                           ^
                           |
                           |
                       /Transform/
                           ^
                           |
                           |
                    MetricsBuilder <--/MBean found/--  MBeansDiscovery <-- JMX

== Design Thoughts

=== Quick Primer

* Java Management Extensions (aka JMX) is a facility that allows for remote clients or
  local agents to manage and/or monitor applications running in any JVM process.
  JMX is an simple way to expose some of the key inner-workings of your application
  in a standardized way.

* This application management and/or monitoring is done via MBeans. Managed Beans
  (aka MBean) is a managed Java object. MBean exposes a management interface
  that consists of attributes (i.e. metrics), operations, notifications, etc.

* For each end-point (i.e. metric, statistic, gauge, meter, etc), application creates
  a MBean and registers it with JMX infrastructure (i.e. MBeanServer).

* A JVM can contain any number of MBeanServer(s); the application can create and release
  them using MBeanServerFactory.

=== MBeansDiscovery

* Periodically scans MBeanServerFactory and discovers MBeanServer(s)

* Scans all the extant MBeans (metrics) from each MBeanServer.

* When an MBean is registered or unregistered in the MBeanServer, a MBeanServerNotification
  Notification is emitted. The agent learns about these by registering a listener to
  "MBeanServerDelegate" MBean.

* If MBean generates an attribute change notification (at run-time MBeanServer exposes this
  capability in MBean's MBeanInfo object), then agent registers a NotificationListener to
  receive notifications from that MBean.

* If MBean does no generate notifications, then agent polls the MBean periodically and
  detect attribute changes.

* The MBeansDiscovery emits following MBean notifications to MetricsBuilder:
** register - given MBean is registered on a MBeanServer
** update - for a given MBean, update attribute values in the local cache
** unregister - given MBean is unregistered from a MBeanServer

=== MetricsBuilder

* MetricsBuilder transforms the MBeans and its attributes into dropwizard metric(s)
  (e.g. Gauge, Counter, Metric, etc)

* In first phase, MetricsBuilder will create a Gauge for each MBean attribute with "Number" data type.

* Once metrics are detected, they are stored in the
link:https://dropwizard.github.io/metrics/3.1.0/getting-started/#the-registry[Dropwizard MetricRegistry].
  The reporter feeds off of the MetricRegistry.

=== Reporting

* The Metrics-Wizard will use the configured reporter for reporting these discovered
  metrics to reporter server.
* The Metrics Agent will create the reporter factory based on configuration.
* It then creates the reporter using the metrics registry with dynamically discovered metrics.
* Reporter then periodically reports the metrics to the reporter server. This processing inside
  the reporter is not in the scope of this library.

=== Error Handling

* If agent fails to gather MBean and/or attribute from JMX interface, it will log an event and
  stops reporting the corresponding Metric(s) to the upstream Server, until the issue is resolved.

* When MBean is unregistered from the MBeanServer, the agent stops monitoring and
  reporting the corresponding Metric(s) to the server.

* The agent maintains metric(s) that allows user to monitor and evaluate agent functionality.
  The agent report following set of statistics:
** NbrMBeanServers - number of MBeanServers monitored
** NbrMBeansRegistered -  number of MBeans registered
** NbrMBeansUnregistered -  number of MBeans unregistered
** NbrMBeanOpsFailed - number of MBeans operations failed
** NbrReporterInvocations - number of time reported has been invoked

* Transport failures encountered by the reporter class are out of scope of the agent.

=== Open questions

* Class path conflicts: what happens if we use dropwizard-metrics 0.2 and the JVM
  processes are using dropwizard-metrics 0.3?

* Are there special types of JMX MBeans that are exposed by off-the-shelf services
  like Cassandra or Kafka, which wouldnâ€™t be normal Long/Double/Floats

=== Future

* Configuration

** Define a threshold for a metric

* Create Metric(s) for MBean attribute with complex data types (e.g. CompositeDataType)

* Create Metric(s) for MBean with known data types (e.g. com.codahale.metrics.Meter)

* Option to create MetricsRegistry(s) per MBeanServer
  link:https://dropwizard.github.io/metrics/3.1.0/manual/core/#metric-names[check this]

* Transformation

** Transform the name or value of the metric
**  Configurable from the YAML configuration for a specific mbean name.
  E.g.
  `org.apache.ZookeeperServiceReplicatedServer_id1.QuorumSize=com.github.lookout.metricswizard.FancyIntTranform`
** Should be configurable from the YAML configuration for a regular expression pattern

== An awful block diagram

                                                       (Datadogd, statsd, etc)
                                                          +---------+
                                                          | Server  |
                                                          +---^-----+
                                                              |
                           +------------------+               |
                           | +--------------+ |               |
    /etc/metrics-wizard.yml| |   Metrics    | |               |
                      <------+   Wizard  +--------------------+
                           | |      ^       | |
                           | +------|-------+ |
                           |    +---+--+      |
                           |    | JMX  |      |
                           | +--+------+----+ |
    /etc/application.yml   | |              | |
                      <------+ Application  | |
                           | |              | |
                           | +--------------+ |
                           | JVM              |
                           +------------------+


== An awful internal diagram

    +-------------+
    | MBeanServer |
    +-------------+
          ^^
    +-----||---------------------------------------------------------------------------+
    |     ||                                                                           |
    |     ||                         METRICS-WIZARD JAVA AGENT                         |
    |     ||                        ===========================                        |
    |     ||                                                                           |
    |  +--++-------------+           +-+--------------------------------------------+  |
    |  |MBeansDiscovery  |           |M|  MetricsBuilder                            |  |
    |  |                 |           |B|                              +----------+  |  |
    |  |    +--+         |register   |e|  +--------------------+      |Metric    |  |  |
    |  |    |L |-+       +---------->+a|  |BasicMetricsContext |-+    |Registry  |  |  |
    |  |    +--+ |       |           |n|  |                    | |    |          |  |  |
    |  |     +---+       |           |s|  |           +-----+ ---------->+-----+ |Reporter
    |  | Listening       |update     |B|  |           |-----|  | |    |  |-----| |--------\+--------+
    |  | MBeanContext(s) +---------->+u|  |     Gauges|-----|  | |    |  |-----| |--------/| Server |
    |  |                 |           |i|  |           |-----+ ---------->+-----+ |  |  |   +--------+
    |  |    +--+         |           |l|  +--------------------+ |    |  Gauges  |  |  |
    |  |    |P |-+       |unregister |d|   +---------------------+    |          |  |  |
    |  |    +--+ |       +---------->+e|      MetricsContext(s)       |          |  |  |
    |  |     +---+       |           |r|                              |          |  |  |
    |  | Polling         |           | |                              |          |  |  |
    |  | MBeanContext(s) |           | |                              |          |  |  |
    |  |                 |           | |                              +----------+  |  |
    |  +-----------------+           +-+--------------------------------------------+  |
    +----------------------------------------------------------------------------------+

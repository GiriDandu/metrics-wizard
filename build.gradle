plugins {
    id "java"
    id "checkstyle"
    id "findbugs"
    id "pmd"
    id "com.jfrog.bintray" version "1.1"
    id 'org.asciidoctor.gradle.asciidoctor' version '1.5.1'
}

/* Adding groovy plugin for spock tests */
apply plugin: 'groovy'

//////////////////////////////////////////////////////
//  BUILD META-DATA
group = 'com.github.lookout'
version = '0.0.1'
description = 'Metrics monitoring agent'
targetCompatibility = '1.7'
sourceCompatibility = '1.7'

//////////////////////////////////////////////////////


//////////////////////////////////////////////////////
//  DEPENDENCY MANAGEMENT
repositories {
    jcenter()
}

dependencies {
    compile "io.dropwizard.metrics:metrics-core:3.1.0"

    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    testCompile 'cglib:cglib-nodep:2.2.+'
}
//////////////////////////////////////////////////////


//////////////////////////////////////////////////////
//  TASKS

test {
    testLogging {
        /* we want more test failure information, see:
         *  <http://mrhaki.blogspot.com/2013/05/gradle-goodness-show-more-information.html>
         */
        exceptionFormat = 'full'
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

jar {
    manifest {
        attributes 'Premain-Class' : 'com.github.lookout.metricswizard.WizardAgent'
    }
}
//////////////////////////////////////////////////////


//////////////////////////////////////////////////////
//  PUBLISHING

/* Add the sources jar to the list of artifacts to publish */
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

asciidoctor {
    sourceDir 'src/asciidoc'
    outputDir 'docs'
    attributes 'toc': 'right',
            'source-highlighter': 'coderay',
            'toc-title': 'Table of Contents',
            'sectanchors' : '',
            'sectlinks' : ''
    shouldRunAfter test
}

task publishDocs(type: Exec) {
    /* If for whatever reason you need to force-push the gh-pages branch this
     * command will work:
     * % git push origin `git subtree split --prefix docs/html5 master`:gh-pages --force
     */

    group 'Publishing'
    description 'Publish the Asciidoctor docs to gh-pages'
    commandLine 'git'
    args 'subtree', 'push', '--prefix', 'docs/html5', 'upstream', 'gh-pages'
    dependsOn asciidoctor
}

//////////////////////////////////////////////////////

